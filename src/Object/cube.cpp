#include "cube.h"


float CubeData1::_vertex[] =
{
	// Right cube
	1.0, -1.0,  1.0,   3.0,  1.0,  1.0,   3.0, -1.0,  1.0,
	1.0, -1.0,  1.0,   1.0,  1.0,  1.0,   3.0,  1.0,  1.0,
	3.0, -1.0,  1.0,   3.0,  1.0, -1.0,   3.0, -1.0, -1.0,
	3.0, -1.0,  1.0,   3.0,  1.0,  1.0,   3.0,  1.0, -1.0,
	3.0, -1.0, -1.0,   1.0,  1.0, -1.0,   1.0, -1.0, -1.0,
	3.0, -1.0, -1.0,   3.0,  1.0, -1.0,   1.0,  1.0, -1.0,
	1.0, -1.0, -1.0,   1.0,  1.0,  1.0,   1.0, -1.0,  1.0,
	1.0, -1.0, -1.0,   1.0,  1.0, -1.0,   1.0,  1.0,  1.0,
	1.0,  1.0,  1.0,   3.0,  1.0, -1.0,   3.0,  1.0,  1.0,
	1.0,  1.0,  1.0,   1.0,  1.0, -1.0,   3.0,  1.0, -1.0,
	1.0, -1.0, -1.0,   3.0, -1.0,  1.0,   3.0, -1.0, -1.0,
	1.0, -1.0, -1.0,   1.0, -1.0,  1.0,   3.0, -1.0,  1.0
};

float CubeData1::_normal[] =
{
	 0.0,  0.0,  1.0,   0.0,  0.0,  1.0,   0.0,  0.0,  1.0,
	 0.0,  0.0,  1.0,   0.0,  0.0,  1.0,   0.0,  0.0,  1.0,
	 1.0,  0.0,  0.0,   1.0,  0.0,  0.0,   1.0,  0.0,  0.0,
	 1.0,  0.0,  0.0,   1.0,  0.0,  0.0,   1.0,  0.0,  0.0,
	 0.0,  0.0, -1.0,   0.0,  0.0, -1.0,   0.0,  0.0, -1.0,
	 0.0,  0.0, -1.0,   0.0,  0.0, -1.0,   0.0,  0.0, -1.0,
	-1.0,  0.0,  0.0,  -1.0,  0.0,  0.0,  -1.0,  0.0,  0.0,
	-1.0,  0.0,  0.0,  -1.0,  0.0,  0.0,  -1.0,  0.0,  0.0,
	 0.0,  1.0,  0.0,   0.0,  1.0,  0.0,   0.0,  1.0,  0.0,
	 0.0,  1.0,  0.0,   0.0,  1.0,  0.0,   0.0,  1.0,  0.0,
	 0.0, -1.0,  0.0,   0.0, -1.0,  0.0,   0.0, -1.0,  0.0,
	 0.0, -1.0,  0.0,   0.0, -1.0,  0.0,   0.0, -1.0,  0.0
};

float CubeData1::_color[] =
{
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0

	//1.0, 1.0, 1.0,  1.0, 0.0, 0.0,  1.0, 0.0, 1.0,
	//1.0, 1.0, 1.0,  1.0, 1.0, 0.0,  1.0, 0.0, 0.0,
	//1.0, 0.0, 1.0,  0.0, 0.0, 0.0,  0.0, 0.0, 1.0,
	//1.0, 0.0, 1.0,  1.0, 0.0, 0.0,  0.0, 0.0, 0.0,
	//0.0, 0.0, 1.0,  0.0, 1.0, 0.0,  0.0, 1.0, 1.0,
	//0.0, 0.0, 1.0,  0.0, 0.0, 0.0,  0.0, 1.0, 0.0,
	//0.0, 1.0, 1.0,  1.0, 1.0, 0.0,  1.0, 1.0, 1.0,
	//0.0, 1.0, 1.0,  0.0, 1.0, 0.0,  1.0, 1.0, 0.0,
	//1.0, 1.0, 0.0,  0.0, 0.0, 0.0,  1.0, 0.0, 0.0,
	//1.0, 1.0, 0.0,  0.0, 1.0, 0.0,  0.0, 0.0, 0.0,
	//0.0, 1.0, 1.0,  1.0, 0.0, 1.0,  0.0, 0.0, 1.0,
	//0.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 0.0, 1.0
};

float CubeData1::_st[] =
{
	0.0, 0.0,  1.0, 1.0,  1.0, 0.0,
	0.0, 0.0,  0.0, 1.0,  1.0, 1.0,
	0.0, 0.0,  1.0, 1.0,  1.0, 0.0,
	0.0, 0.0,  0.0, 1.0,  1.0, 1.0,
	0.0, 0.0,  1.0, 1.0,  1.0, 0.0,
	0.0, 0.0,  0.0, 1.0,  1.0, 1.0,
	0.0, 0.0,  1.0, 1.0,  1.0, 0.0,
	0.0, 0.0,  0.0, 1.0,  1.0, 1.0,
	0.0, 0.0,  1.0, 1.0,  1.0, 0.0,
	0.0, 0.0,  0.0, 1.0,  1.0, 1.0,
	0.0, 0.0,  1.0, 1.0,  1.0, 0.0,
	0.0, 0.0,  0.0, 1.0,  1.0, 1.0
};


float CubeData2::_vertex[] =
{
	// Left cube
	-3.0, -1.0,  1.0,   -1.0,  1.0,  1.0,  -1.0, -1.0,  1.0,
	-3.0, -1.0,  1.0,   -3.0,  1.0,  1.0,  -1.0,  1.0,  1.0,
	-1.0, -1.0,  1.0,   -1.0,  1.0, -1.0,  -1.0, -1.0, -1.0,
	-1.0, -1.0,  1.0,   -1.0,  1.0,  1.0,  -1.0,  1.0, -1.0,
	-1.0, -1.0, -1.0,   -3.0,  1.0, -1.0,  -3.0, -1.0, -1.0,
	-1.0, -1.0, -1.0,   -1.0,  1.0, -1.0,  -3.0,  1.0, -1.0,
	-3.0, -1.0, -1.0,   -3.0,  1.0,  1.0,  -3.0, -1.0,  1.0,
	-3.0, -1.0, -1.0,   -3.0,  1.0, -1.0,  -3.0,  1.0,  1.0,
	-3.0,  1.0,  1.0,   -1.0,  1.0, -1.0,  -1.0,  1.0,  1.0,
	-3.0,  1.0,  1.0,   -3.0,  1.0, -1.0,  -1.0,  1.0, -1.0,
	-3.0, -1.0, -1.0,   -1.0, -1.0,  1.0,  -1.0, -1.0, -1.0,
	-3.0, -1.0, -1.0,   -3.0, -1.0,  1.0,  -1.0, -1.0,  1.0
};

float CubeData2::_normal[] =
{
	 0.0,  0.0,  1.0,   0.0,  0.0,  1.0,   0.0,  0.0,  1.0,
	 0.0,  0.0,  1.0,   0.0,  0.0,  1.0,   0.0,  0.0,  1.0,
	 1.0,  0.0,  0.0,   1.0,  0.0,  0.0,   1.0,  0.0,  0.0,
	 1.0,  0.0,  0.0,   1.0,  0.0,  0.0,   1.0,  0.0,  0.0,
	 0.0,  0.0, -1.0,   0.0,  0.0, -1.0,   0.0,  0.0, -1.0,
	 0.0,  0.0, -1.0,   0.0,  0.0, -1.0,   0.0,  0.0, -1.0,
	-1.0,  0.0,  0.0,  -1.0,  0.0,  0.0,  -1.0,  0.0,  0.0,
	-1.0,  0.0,  0.0,  -1.0,  0.0,  0.0,  -1.0,  0.0,  0.0,
	 0.0,  1.0,  0.0,   0.0,  1.0,  0.0,   0.0,  1.0,  0.0,
	 0.0,  1.0,  0.0,   0.0,  1.0,  0.0,   0.0,  1.0,  0.0,
	 0.0, -1.0,  0.0,   0.0, -1.0,  0.0,   0.0, -1.0,  0.0,
	 0.0, -1.0,  0.0,   0.0, -1.0,  0.0,   0.0, -1.0,  0.0
};

float CubeData2::_color[] =
{
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0,
	1.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 1.0, 1.0

	//1.0, 1.0, 1.0,  1.0, 0.0, 0.0,  1.0, 0.0, 1.0,
	//1.0, 1.0, 1.0,  1.0, 1.0, 0.0,  1.0, 0.0, 0.0,
	//1.0, 0.0, 1.0,  0.0, 0.0, 0.0,  0.0, 0.0, 1.0,
	//1.0, 0.0, 1.0,  1.0, 0.0, 0.0,  0.0, 0.0, 0.0,
	//0.0, 0.0, 1.0,  0.0, 1.0, 0.0,  0.0, 1.0, 1.0,
	//0.0, 0.0, 1.0,  0.0, 0.0, 0.0,  0.0, 1.0, 0.0,
	//0.0, 1.0, 1.0,  1.0, 1.0, 0.0,  1.0, 1.0, 1.0,
	//0.0, 1.0, 1.0,  0.0, 1.0, 0.0,  1.0, 1.0, 0.0,
	//1.0, 1.0, 0.0,  0.0, 0.0, 0.0,  1.0, 0.0, 0.0,
	//1.0, 1.0, 0.0,  0.0, 1.0, 0.0,  0.0, 0.0, 0.0,
	//0.0, 1.0, 1.0,  1.0, 0.0, 1.0,  0.0, 0.0, 1.0,
	//0.0, 1.0, 1.0,  1.0, 1.0, 1.0,  1.0, 0.0, 1.0
};

float CubeData2::_st[] =
{
	0.0, 0.0,  1.0, 1.0,  1.0, 0.0,
	0.0, 0.0,  0.0, 1.0,  1.0, 1.0,
	0.0, 0.0,  1.0, 1.0,  1.0, 0.0,
	0.0, 0.0,  0.0, 1.0,  1.0, 1.0,
	0.0, 0.0,  1.0, 1.0,  1.0, 0.0,
	0.0, 0.0,  0.0, 1.0,  1.0, 1.0,
	0.0, 0.0,  1.0, 1.0,  1.0, 0.0,
	0.0, 0.0,  0.0, 1.0,  1.0, 1.0,
	0.0, 0.0,  1.0, 1.0,  1.0, 0.0,
	0.0, 0.0,  0.0, 1.0,  1.0, 1.0,
	0.0, 0.0,  1.0, 1.0,  1.0, 0.0,
	0.0, 0.0,  0.0, 1.0,  1.0, 1.0
};


Cube1::~Cube1(void)
{
	glDeleteBuffers(_vbo.N_Buffer(), _vbo.BufferPointer());
	glDeleteVertexArrays(_vao.N_Buffer(), _vao.BufferPointer());
}

Cube1::Cube1(void)
	: _vao()
	, _vbo()
{
}

void Cube1::BufferDataInitialize(void)
{
	_vao.Initialize(1);
	_vbo.Initialize(3);

	glGenVertexArrays(_vao.N_Buffer(), _vao.BufferPointer());
	glGenBuffers(_vbo.N_Buffer(), _vbo.BufferPointer());

	glBindVertexArray(_vao[0]);

	glBindBuffer(GL_ARRAY_BUFFER, _vbo[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(float) * CUBE_DATA_ROW * CUBE_DATA_COL, _data._vertex, GL_STATIC_DRAW);

	glBindBuffer(GL_ARRAY_BUFFER, _vbo[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(float) * CUBE_DATA_ROW * CUBE_DATA_COL, _data._normal, GL_STATIC_DRAW);

	glBindBuffer(GL_ARRAY_BUFFER, _vbo[2]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(float) * CUBE_DATA_ROW * CUBE_DATA_COL, _data._color, GL_STATIC_DRAW);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);

	return;
}


Cube2::~Cube2(void)
{
	glDeleteBuffers(_vbo.N_Buffer(), _vbo.BufferPointer());
	glDeleteVertexArrays(_vao.N_Buffer(), _vao.BufferPointer());
}

Cube2::Cube2(void)
	: _vao()
	, _vbo()
{
}

void Cube2::BufferDataInitialize(void)
{
	_vao.Initialize(1);
	_vbo.Initialize(3);

	glGenVertexArrays(_vao.N_Buffer(), _vao.BufferPointer());
	glGenBuffers(_vbo.N_Buffer(), _vbo.BufferPointer());

	glBindVertexArray(_vao[0]);

	glBindBuffer(GL_ARRAY_BUFFER, _vbo[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(float) * CUBE_DATA_ROW * CUBE_DATA_COL, _data._vertex, GL_STATIC_DRAW);

	glBindBuffer(GL_ARRAY_BUFFER, _vbo[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(float) * CUBE_DATA_ROW * CUBE_DATA_COL, _data._normal, GL_STATIC_DRAW);

	glBindBuffer(GL_ARRAY_BUFFER, _vbo[2]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(float) * CUBE_DATA_ROW * CUBE_DATA_COL, _data._color, GL_STATIC_DRAW);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);

	return;
}